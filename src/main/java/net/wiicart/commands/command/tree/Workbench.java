package net.wiicart.commands.command.tree;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.HashMap;
import java.util.Map;
import java.util.function.Consumer;
import java.util.function.Supplier;

/**
 * Used to run code and store/retrieve Objects within a TreeBuilder.<br/>
 * Remains consistent through all children builders created with {@link TreeBuilder#withChild(String, Consumer)}
 */
public class Workbench {

    private final Map<String, Object> store = new HashMap<>();

    Workbench() {}

    /**
     * Stores an Object generated by the provided Supplier.
     * @param name The name it can be retrieved by with {@link Workbench#retrieve(Class, String)}.
     * @param supplier The Supplier that provides the Object.
     * @param <T> The Object type
     */
    public <T> void store(@NotNull String name, @NotNull Supplier<T> supplier) {
        store.put(name, supplier.get());
    }

    /**
     * Retrieves a Object stored via {@link Workbench#store(String, Supplier)}.<br/>
     * This method can return null, even if an Object mapped to the provided name is present,
     * if the Object is not assignable from the class parameter.
     * @param type The Class type the Object should be retrieved as.
     * @param name The name the stored Object is linked to
     * @return The stored Object if present
     * @param <T> The Object type
     */
    @Nullable
    public <T> T retrieve(@NotNull Class<T> type, @NotNull String name) {
        Object val = store.get(name);
        if (val != null && type.isAssignableFrom(val.getClass())) {
            return type.cast(val);
        }
        return null;
    }

}
